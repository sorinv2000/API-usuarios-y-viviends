openapi: "3.0.0"
info:
  title: "User and Houses API"
  version: "1.0.0"
  description: "API for managing users and their houses"
servers:
  - url: "http://localhost:3000/api/v1"
paths:
  /users:
    get:
      summary: "Retrieve a list of users"
      responses:
        '200':
          description: "A list of users"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Create a new user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '201':
          description: "User created"
          headers:
            X-API-Version:
              $ref: '#/components/headers/X-API-Version'
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}:
    get:
      summary: "Retrieve a single user"
      parameters:
        - in: "path"
          name: "userId"
          schema:
            type: "string"
          required: true
          description: "The user ID"
      responses:
        '200':
          description: "A single user"
          headers:
            X-API-Version:
              $ref: '#/components/headers/X-API-Version'
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '404':
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: "Update a user partially"
      parameters:
        - in: "path"
          name: "userId"
          schema:
            type: "string"
          required: true
          description: "The user ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '200':
          description: "User updated"
          headers:
            X-API-Version:
              $ref: '#/components/headers/X-API-Version'
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: "Update a user completely"
      parameters:
        - in: "path"
          name: "userId"
          schema:
            type: "string"
          required: true
          description: "The user ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '200':
          description: "User updated"
          headers:
            X-API-Version:
              $ref: '#/components/headers/X-API-Version'
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: "Delete a user"
      parameters:
        - in: "path"
          name: "userId"
          schema:
            type: "string"
          required: true
          description: "The user ID"
      responses:
        '204':
          description: "User deleted"
          headers:
            X-API-Version:
              $ref: '#/components/headers/X-API-Version'
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '409':
          description: "Conflict - User has houses, cannot delete"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}/houses:
    get:
      summary: "Retrieve all houses of a user with optional filters"
      parameters:
        - in: "path"
          name: "userId"
          schema:
            type: "string"
          required: true
          description: "The user ID"
        - in: "query"
          name: "city"
          schema:
            type: "string"
          required: false
          description: "Filter by city"
        - in: "query"
          name: "street"
          schema:
            type: "string"
          required: false
          description: "Filter by street"
        - in: "query"
          name: "country"
          schema:
            type: "string"
          description: "Filter by country"
      responses:
        '200':
          description: "A list of houses"
          headers:
            X-API-Version:
              $ref: '#/components/headers/X-API-Version'
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/House"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Create a new house for a user"
      parameters:
        - in: "path"
          name: "userId"
          schema:
            type: "string"
          required: true
          description: "The user ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/House"
      responses:
        '201':
          description: "House created"
          headers:
            X-API-Version:
              $ref: '#/components/headers/X-API-Version'
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/House"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}/houses/{houseId}:
    put:
      summary: "Update a house of a user"
      parameters:
        - in: "path"
          name: "userId"
          schema:
            type: "string"
          required: true
          description: "The user ID"
        - in: "path"
          name: "houseId"
          schema:
            type: "string"
          required: true
          description: "The house ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/House"
      responses:
        '200':
          description: "House updated"
          headers:
            X-API-Version:
              $ref: '#/components/headers/X-API-Version'
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/House"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: "House not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: "Delete a house of a user"
      parameters:
        - in: "path"
          name: "userId"
          schema:
            type: "string"
          required: true
          description: "The user ID"
        - in: "path"
          name: "houseId"
          schema:
            type: "string"
          required: true
          description: "The house ID"
      responses:
        '204':
          description: "House deleted"
          headers:
            X-API-Version:
              $ref: '#/components/headers/X-API-Version'
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: "House not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  headers:
    X-API-Version:
      description: The version of the API that generated the response
      schema:
        type: string
      example: 1.0.0
    X-Rate-Limit-Limit:
      description: The maximum number of requests that the consumer is permitted to make in a given time window
      schema:
        type: integer
        format: int32
      example: 1000
    X-Rate-Limit-Remaining:
      description: The number of requests remaining in the current rate limit window
      schema:
        type: integer
        format: int32
      example: 999
    Strict-Transport-Security:
      description: Ensures that the browser connects to the server over HTTPS
      schema:
        type: string
      example: max-age=31536000; includeSubDomains
    Content-Security-Policy:
      description: Helps prevent XSS attacks by specifying the sources from which content can be loaded
      schema:
        type: string
      example: default-src 'self'; script-src 'self' https://apis.example.com
    X-Content-Type-Options:
      description: Prevents browsers from MIME-sniffing a response away from the declared content type
      schema:
        type: string
      example: nosniff
  schemas:
    User:
      type: "object"
      required:
        - name
        - email
      properties:
        id:
          type: "string"
          example: "1"
        name:
          type: "string"
          example: "Miguel"
        email:
          type: "string"
          example: "antonio.banderas@telepizza.com"
    House:
      type: "object"
      required:
        - city
        - street
        - country
      properties:
        id:
          type: "number"
          example: "1"
        userId:
          type: "number"
          example: "1"
        city:
          type: "string"
          example: "Cadiz"
        street:
          type: "string"
          example: "Calle Ancha"
        country:
          type: "string"
          example : "Spain"
    Error:
      type: "object"
      properties:
        code:
          type: "integer"
        message:
          type: "string"
